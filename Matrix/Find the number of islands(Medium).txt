//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;
class GFG {
    public static void main(String[] args) throws IOException {
        BufferedReader br =
            new BufferedReader(new InputStreamReader(System.in));
        int T = Integer.parseInt(br.readLine().trim());
        while (T-- > 0) {
            String[] s = br.readLine().trim().split(" ");
            int n = Integer.parseInt(s[0]);
            int m = Integer.parseInt(s[1]);
            char[][] grid = new char[n][m];
            for (int i = 0; i < n; i++) {
                String[] S = br.readLine().trim().split(" ");
                for (int j = 0; j < m; j++) {
                    grid[i][j] = S[j].charAt(0);
                }
            }
            Solution obj = new Solution();
            int ans = obj.numIslands(grid);
            System.out.println(ans);
        }
    }
}
// } Driver Code Ends


class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        // Code here
        int i, j, count = 0, n = grid.length, m = grid[0].length;
        boolean[][] visited = new boolean[n][m];
        for(i = 0; i < n; i++) {
            for(j = 0; j < m; j++) {
                if(grid[i][j] == '1' && !visited[i][j]) {
                    DFS(grid, visited, i, j, n, m);
                    count++;
                }
            }
        }
        
        return count;
    }
    
    public void DFS(char[][] grid, boolean[][] visited, int i, int j, int n, int m) {
        visited[i][j] = true;
        int[][] axis = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        int x, y;
        for(int k = 0; k < 8; k++) {
            x = i + axis[k][0];
            y = j + axis[k][1];
            if(0 > x || x >= n || 0 > y || y >= m || grid[x][y] == '0' || visited[x][y])
                continue;
            DFS(grid, visited, x, y, n, m);
        }
    }
}