//{ Driver Code Starts
//Initial Template for Java

import java.io.*;
import java.util.*;

class GFG{
    public static void main(String args[])throws IOException
    {
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        int t = Integer.parseInt(in.readLine());
        while(t-- > 0){
            String a[] = in.readLine().trim().split(" ");
            int n = Integer.parseInt(a[0]);
            int m = Integer.parseInt(a[1]);
            char mat[][] = new char[n][m];
            for(int i=0; i<n; i++)
            {
                String S[] = in.readLine().trim().split(" ");
                for(int j=0; j<m; j++)
                {
                    mat[i][j] = S[j].charAt(0);
                }
            }
            
            Solution ob = new Solution();
            char[][] ans = ob.fill(n, m, mat);
            for(int i = 0;i < n;i++) {
                for(int j = 0;j < m;j++) {
                    System.out.print(ans[i][j] + " ");
                }
                System.out.println();
            }
        }
    }
}
// } Driver Code Ends


//User function Template for Java

class Solution{
    static char[][] fill(int n, int m, char a[][])
    {
        // code here
        boolean[][] visited = new boolean[n][m];
        int i, j;
        for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
                if((i == 0 || i == (n - 1) || j == 0 || j == (m - 1)) && a[i][j] == 'O' && !visited[i][j])
                    DFS(a, visited, i, j, n, m);
                    
        for(i = 0; i < n; i++)
            for(j = 0; j < m; j++)
                if(a[i][j] == 'O' && !visited[i][j])
                    a[i][j] = 'X';
                    
        return a;
    }
    
    static void DFS(char[][] a, boolean[][] visited, int i, int j, int n, int m) {
        visited[i][j] = true;
        
        int[][] axis = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        int x, y;
        for(int u = 0; u < 4; u++) {
            x = i + axis[u][0];
            y = j + axis[u][1];
            
            if(x < 0 || x >= n || y < 0 || y >= m || a[x][y] == 'X' || visited[x][y])
                continue;
            DFS(a, visited, x, y, n, m);
        }
    }
}